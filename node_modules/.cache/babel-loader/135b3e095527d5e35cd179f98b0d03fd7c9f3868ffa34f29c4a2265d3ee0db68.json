{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EnkiE\\\\Documents\\\\builds\\\\react-docs-main-concepts\\\\src\\\\components\\\\Counter.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n    this.increment = this.increment.bind(this);\n  }\n\n  // All set state calls are batched into one update in order to prevent unnecessary rerenders. This makes setState asynchronous,\n  // because of this you cannot rely on current state to calculate next state, such as in a counter. \n\n  increment() {\n    this.setState({\n      count: this.state.count + this.props.increment\n    });\n    this.setState((prev, props) => ({\n      count: prev.count + props.increment\n    }));\n    console.log(this.state.count);\n    // There is a callback you can pass to setState, it takes in the previous state, and the current props at time of update.\n    //  as inputs\n\n    // this.setState((prev, props) => ({count: prev.count + props.increment}))\n    // this.setState((prev, props) => ({count: prev.count + props.increment}))\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: this.state.count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.increment,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Counter","Component","constructor","props","state","count","increment","bind","setState","prev","console","log","render"],"sources":["C:/Users/EnkiE/Documents/builds/react-docs-main-concepts/src/components/Counter.js"],"sourcesContent":["import React from 'react'\r\n\r\nexport default class Counter extends React.Component {\r\n    constructor(props) {\r\n        super(props) \r\n        this.state = {\r\n            count: 0\r\n        }\r\n\r\n        this.increment = this.increment.bind(this)\r\n    }\r\n\r\n    // All set state calls are batched into one update in order to prevent unnecessary rerenders. This makes setState asynchronous,\r\n    // because of this you cannot rely on current state to calculate next state, such as in a counter. \r\n   \r\n    increment() {\r\n        \r\n        this.setState({count: this.state.count + this.props.increment})\r\n        this.setState((prev, props) => ({count: prev.count + props.increment}))\r\n        console.log(this.state.count)\r\n        // There is a callback you can pass to setState, it takes in the previous state, and the current props at time of update.\r\n        //  as inputs\r\n        \r\n        // this.setState((prev, props) => ({count: prev.count + props.increment}))\r\n        // this.setState((prev, props) => ({count: prev.count + props.increment}))\r\n\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button>-</button>\r\n                <h1>{this.state.count}</h1>\r\n                <button onClick={this.increment}>+</button>\r\n            </div>\r\n        )\r\n    }\r\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA;AAEzB,eAAe,MAAMC,OAAO,SAASD,KAAK,CAACE,SAAS,CAAC;EACjDC,WAAW,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MACTC,KAAK,EAAE;IACX,CAAC;IAED,IAAI,CAACC,SAAS,GAAG,IAAI,CAACA,SAAS,CAACC,IAAI,CAAC,IAAI,CAAC;EAC9C;;EAEA;EACA;;EAEAD,SAAS,GAAG;IAER,IAAI,CAACE,QAAQ,CAAC;MAACH,KAAK,EAAE,IAAI,CAACD,KAAK,CAACC,KAAK,GAAG,IAAI,CAACF,KAAK,CAACG;IAAS,CAAC,CAAC;IAC/D,IAAI,CAACE,QAAQ,CAAC,CAACC,IAAI,EAAEN,KAAK,MAAM;MAACE,KAAK,EAAEI,IAAI,CAACJ,KAAK,GAAGF,KAAK,CAACG;IAAS,CAAC,CAAC,CAAC;IACvEI,OAAO,CAACC,GAAG,CAAC,IAAI,CAACP,KAAK,CAACC,KAAK,CAAC;IAC7B;IACA;;IAEA;IACA;EAGJ;;EAEAO,MAAM,GAAG;IACL,oBACI;MAAA,wBACI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAkB,eAClB;QAAA,UAAK,IAAI,CAACR,KAAK,CAACC;MAAK;QAAA;QAAA;QAAA;MAAA,QAAM,eAC3B;QAAQ,OAAO,EAAE,IAAI,CAACC,SAAU;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAW;IAAA;MAAA;MAAA;MAAA;IAAA,QACzC;EAEd;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}