{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EnkiE\\\\Documents\\\\builds\\\\react-docs-main-concepts\\\\src\\\\components\\\\Clock.js\";\nimport React from 'react';\n\n// State is similar to props, but it is private and fully controlled by the component it is defined within. You can create state \n// for both class and function components.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ClockClass extends React.Component {\n  // Props come in through the constructor, and state is initialized here. \n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date()\n    };\n  }\n\n  // In apps with many components its important to clear up any resources being used when a component is removed from the DOM. AKA\n  // unmounted.\n  // Whenever a component is rendered for the first time it is called mounting.\n  // There are special methods you can declare that run code at various points in a components life, such as mounting and unmounting, \n  // these are called lifecycle methods.\n\n  // runs after the component output has been rendered to the DOM, good for setting things  up such as timers.\n  componentDidMount() {\n    // you can define variables for your classes using the this keyword.\n    // When you call setInterval it returns an ID, which you need to pass to clearInterval in order to clear the timer.\n    this.timerID = setInterval(() => this.setState({\n      date: new Date()\n    }), 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  //The render method is called each time a component updates, but as long as the component is rendered into the same DOM node,\n  // Only a single instance is used. This lets a component use additional features such as state and lifecycle methods.\n  render() {\n    return (\n      /*#__PURE__*/\n      // To utilize state or props in class components you must use the this keyword. \n      _jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Hello, world! Im a class\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"It is \", this.state.date.toLocaleTimeString(), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)\n    );\n  }\n}\nconst Clock = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hello, world! Im a function\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"It is \", props.date.toLocaleTimeString(), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_c = Clock;\nexport { Clock, ClockClass };\nvar _c;\n$RefreshReg$(_c, \"Clock\");","map":{"version":3,"names":["React","ClockClass","Component","constructor","props","state","date","Date","componentDidMount","timerID","setInterval","setState","componentWillUnmount","clearInterval","tick","render","toLocaleTimeString","Clock"],"sources":["C:/Users/EnkiE/Documents/builds/react-docs-main-concepts/src/components/Clock.js"],"sourcesContent":["import React from 'react'\r\n\r\n// State is similar to props, but it is private and fully controlled by the component it is defined within. You can create state \r\n// for both class and function components.\r\n\r\n\r\n\r\nclass ClockClass extends React.Component {\r\n    // Props come in through the constructor, and state is initialized here. \r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            date: new Date()\r\n        }\r\n    }\r\n\r\n    // In apps with many components its important to clear up any resources being used when a component is removed from the DOM. AKA\r\n    // unmounted.\r\n    // Whenever a component is rendered for the first time it is called mounting.\r\n    // There are special methods you can declare that run code at various points in a components life, such as mounting and unmounting, \r\n    // these are called lifecycle methods.\r\n\r\n    // runs after the component output has been rendered to the DOM, good for setting things  up such as timers.\r\n    componentDidMount(){\r\n        // you can define variables for your classes using the this keyword.\r\n        // When you call setInterval it returns an ID, which you need to pass to clearInterval in order to clear the timer.\r\n        this.timerID = setInterval(\r\n            () => this.setState({\r\n                date: new Date()\r\n            }),\r\n            1000\r\n          );\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.timerID);\r\n    }\r\n\r\n    tick(){\r\n        this.setState({\r\n            date: new Date()\r\n        })\r\n    }\r\n\r\n    //The render method is called each time a component updates, but as long as the component is rendered into the same DOM node,\r\n    // Only a single instance is used. This lets a component use additional features such as state and lifecycle methods.\r\n    render() {\r\n        return (\r\n            // To utilize state or props in class components you must use the this keyword. \r\n            <div>\r\n              <h1>Hello, world! Im a class</h1>\r\n              <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\r\n            </div>\r\n          );\r\n    }\r\n}\r\n\r\nconst Clock = (props) => {\r\n    return (\r\n        <div>\r\n          <h1>Hello, world! Im a function</h1>\r\n          <h2>It is {props.date.toLocaleTimeString()}.</h2>\r\n        </div>\r\n      );\r\n}\r\n\r\nexport  {Clock, ClockClass}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AAAA;AAIA,MAAMC,UAAU,SAASD,KAAK,CAACE,SAAS,CAAC;EACrC;EACAC,WAAW,CAACC,KAAK,EAAC;IACd,KAAK,CAACA,KAAK,CAAC;IAEZ,IAAI,CAACC,KAAK,GAAG;MACTC,IAAI,EAAE,IAAIC,IAAI;IAClB,CAAC;EACL;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACAC,iBAAiB,GAAE;IACf;IACA;IACA,IAAI,CAACC,OAAO,GAAGC,WAAW,CACtB,MAAM,IAAI,CAACC,QAAQ,CAAC;MAChBL,IAAI,EAAE,IAAIC,IAAI;IAClB,CAAC,CAAC,EACF,IAAI,CACL;EACP;EAEAK,oBAAoB,GAAE;IAClBC,aAAa,CAAC,IAAI,CAACJ,OAAO,CAAC;EAC/B;EAEAK,IAAI,GAAE;IACF,IAAI,CAACH,QAAQ,CAAC;MACVL,IAAI,EAAE,IAAIC,IAAI;IAClB,CAAC,CAAC;EACN;;EAEA;EACA;EACAQ,MAAM,GAAG;IACL;MAAA;MACI;MACA;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAiC,eACjC;UAAA,qBAAW,IAAI,CAACV,KAAK,CAACC,IAAI,CAACU,kBAAkB,EAAE;QAAA;UAAA;UAAA;UAAA;QAAA,QAAO;MAAA;QAAA;QAAA;QAAA;MAAA;IAClD;EAEd;AACJ;AAEA,MAAMC,KAAK,GAAIb,KAAK,IAAK;EACrB,oBACI;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAoC,eACpC;MAAA,qBAAWA,KAAK,CAACE,IAAI,CAACU,kBAAkB,EAAE;IAAA;MAAA;MAAA;MAAA;IAAA,QAAO;EAAA;IAAA;IAAA;IAAA;EAAA,QAC7C;AAEd,CAAC;AAAA,KAPKC,KAAK;AASX,SAASA,KAAK,EAAEhB,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}