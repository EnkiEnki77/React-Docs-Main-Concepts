{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EnkiE\\\\Documents\\\\builds\\\\react-docs-main-concepts\\\\src\\\\index.js\";\n// A package that provides DOM specific methods that can be used at the top level of your app. \nimport { createRoot } from \"react-dom\";\n\n// Creates a React root for the supplied div container, and then returns the root to be assigned to variable. The root is used \n// to render elements into the DOM using render(). The root container wraps all components in the DOM tree.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = createRoot(document.getElementById('root'));\nconst name = 'Enki';\n// This is JSX, it stands for JS XML. It is neither a string, nor HTML. It is a syntax extension to JS, and is used to describe\n// what the ui should look like in React. It produces React elements. React doesnt require JSX, but its a helpful visual aid, and  \n// supplies more error messages. \n// You can embed any valid JS expression into JSX using curly braces.\nconst element = /*#__PURE__*/_jsxDEV(\"h1\", {\n  children: [\"Hello \", name]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 13,\n  columnNumber: 17\n}, this);\nconst nameFunc = user => `${user.firstName} ${user.lastName}`;\nconst user = {\n  firstName: 'Enki',\n  lastName: 'Winters'\n};\nconst userElement = /*#__PURE__*/_jsxDEV(\"h1\", {\n  children: [\"Hello, \", nameFunc(user)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 20,\n  columnNumber: 21\n}, this);\n// Renders a header to the DOM.\nroot.render(userElement);","map":{"version":3,"names":["createRoot","root","document","getElementById","name","element","nameFunc","user","firstName","lastName","userElement","render"],"sources":["C:/Users/EnkiE/Documents/builds/react-docs-main-concepts/src/index.js"],"sourcesContent":["// A package that provides DOM specific methods that can be used at the top level of your app. \r\nimport {createRoot} from \"react-dom\";\r\n\r\n// Creates a React root for the supplied div container, and then returns the root to be assigned to variable. The root is used \r\n// to render elements into the DOM using render(). The root container wraps all components in the DOM tree.\r\nconst root = createRoot(document.getElementById('root'))\r\n\r\nconst name = 'Enki'\r\n// This is JSX, it stands for JS XML. It is neither a string, nor HTML. It is a syntax extension to JS, and is used to describe\r\n// what the ui should look like in React. It produces React elements. React doesnt require JSX, but its a helpful visual aid, and  \r\n// supplies more error messages. \r\n// You can embed any valid JS expression into JSX using curly braces.\r\nconst element = <h1>Hello {name}</h1>   \r\n\r\nconst nameFunc = user => `${user.firstName} ${user.lastName}`\r\nconst user = {\r\n    firstName: 'Enki',\r\n    lastName: 'Winters'\r\n}\r\nconst userElement = <h1>Hello, {nameFunc(user)}</h1>\r\n// Renders a header to the DOM.\r\nroot.render( userElement)"],"mappings":";AAAA;AACA,SAAQA,UAAU,QAAO,WAAW;;AAEpC;AACA;AAAA;AACA,MAAMC,IAAI,GAAGD,UAAU,CAACE,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAExD,MAAMC,IAAI,GAAG,MAAM;AACnB;AACA;AACA;AACA;AACA,MAAMC,OAAO,gBAAG;EAAA,qBAAWD,IAAI;AAAA;EAAA;EAAA;EAAA;AAAA,QAAM;AAErC,MAAME,QAAQ,GAAGC,IAAI,IAAK,GAAEA,IAAI,CAACC,SAAU,IAAGD,IAAI,CAACE,QAAS,EAAC;AAC7D,MAAMF,IAAI,GAAG;EACTC,SAAS,EAAE,MAAM;EACjBC,QAAQ,EAAE;AACd,CAAC;AACD,MAAMC,WAAW,gBAAG;EAAA,sBAAYJ,QAAQ,CAACC,IAAI,CAAC;AAAA;EAAA;EAAA;EAAA;AAAA,QAAM;AACpD;AACAN,IAAI,CAACU,MAAM,CAAED,WAAW,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}