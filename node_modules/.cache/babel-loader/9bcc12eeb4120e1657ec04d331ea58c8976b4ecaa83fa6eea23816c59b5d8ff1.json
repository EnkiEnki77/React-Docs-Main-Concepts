{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EnkiE\\\\Documents\\\\builds\\\\react-docs-main-concepts\\\\src\\\\components\\\\NameForm.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChangeSelect = event => {\n      this.setState({\n        select: event.target.value\n      });\n    };\n    this.state = {\n      value: '',\n      select: 'coconut'\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(event) {\n    // setting the state to the event elements value, which is the input from the user. \n    this.setState({\n      value: event.target.value,\n      select: event.target.value\n    });\n  }\n  handleSubmit(event) {\n    alert('A name was submitted: ' + this.state.value);\n    // utilizing the synthetic event input to prevent default behaviour of the form refreshing the page on submit\n    event.preventDefault();\n  }\n  // By default forms in react have the typical form behaviour of browsing to a new page when a user submits the form. in most\n  // cases though you want to have an onSubmit event listener that runs an event handler function that handles the submmission\n  // and has access to the data the user entered in the form. The process of doing this is called controlled components. \n\n  // In HTML inputs usually maintain their own state, and update it based on user input. In React components mutable state is \n  // usually kept in the state property, and updated through setState. We can combine the two by setting the value of inputs to\n  // be determined by state, and allowing users to alter state on input using an eventHandler and the synthetic event argument.\n  // An input whose value is controlled by React in this way is called a controlled component\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: this.state.value,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Pick your favorite flavor:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          multiple: true,\n          value: ['lime', 'coconut'],\n          onChange: this.handleChangeSelect,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"grapefruit\",\n            children: \"Grapefruit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"lime\",\n            children: \"Lime\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"coconut\",\n            children: \"Coconut\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"mango\",\n            children: \"Mango\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this);\n  }\n}\nexport default NameForm;","map":{"version":3,"names":["React","NameForm","Component","constructor","props","handleChangeSelect","event","setState","select","target","value","state","handleChange","bind","handleSubmit","alert","preventDefault","render"],"sources":["C:/Users/EnkiE/Documents/builds/react-docs-main-concepts/src/components/NameForm.js"],"sourcesContent":["import React from 'react';\r\n\r\nclass NameForm extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {value: '', select: 'coconut'};\r\n  \r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n  \r\n    handleChange(event) {\r\n      // setting the state to the event elements value, which is the input from the user. \r\n      this.setState({value: event.target.value, select: event.target.value});\r\n    }\r\n  \r\n    handleSubmit(event) {\r\n      alert('A name was submitted: ' + this.state.value);\r\n      // utilizing the synthetic event input to prevent default behaviour of the form refreshing the page on submit\r\n      event.preventDefault();\r\n    }\r\n\r\n    handleChangeSelect = (event) => {\r\n      this.setState({select: event.target.value});\r\n    }\r\n    \r\n\r\n    // By default forms in react have the typical form behaviour of browsing to a new page when a user submits the form. in most\r\n    // cases though you want to have an onSubmit event listener that runs an event handler function that handles the submmission\r\n    // and has access to the data the user entered in the form. The process of doing this is called controlled components. \r\n\r\n    // In HTML inputs usually maintain their own state, and update it based on user input. In React components mutable state is \r\n    // usually kept in the state property, and updated through setState. We can combine the two by setting the value of inputs to\r\n    // be determined by state, and allowing users to alter state on input using an eventHandler and the synthetic event argument.\r\n    // An input whose value is controlled by React in this way is called a controlled component\r\n    render() {\r\n      return (\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>\r\n            Name:\r\n            <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n          </label>\r\n          <label>\r\n          {/* Dropdown values are chosen by passing the state and event listener on the select tag, initial choice is determined by \r\n          initial state. you can  */}\r\n          Pick your favorite flavor:\r\n          <select multiple={true} value={['lime', 'coconut']} onChange={this.handleChangeSelect}>\r\n            <option value=\"grapefruit\">Grapefruit</option>\r\n            <option value=\"lime\">Lime</option>\r\n            <option value=\"coconut\">Coconut</option>\r\n            <option value=\"mango\">Mango</option>\r\n          </select>\r\n        </label>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default NameForm "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC;AAE1B,MAAMC,QAAQ,SAASD,KAAK,CAACE,SAAS,CAAC;EACnCC,WAAW,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAAC,KAkBfC,kBAAkB,GAAIC,KAAK,IAAK;MAC9B,IAAI,CAACC,QAAQ,CAAC;QAACC,MAAM,EAAEF,KAAK,CAACG,MAAM,CAACC;MAAK,CAAC,CAAC;IAC7C,CAAC;IAnBC,IAAI,CAACC,KAAK,GAAG;MAACD,KAAK,EAAE,EAAE;MAAEF,MAAM,EAAE;IAAS,CAAC;IAE3C,IAAI,CAACI,YAAY,GAAG,IAAI,CAACA,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC;IAChD,IAAI,CAACC,YAAY,GAAG,IAAI,CAACA,YAAY,CAACD,IAAI,CAAC,IAAI,CAAC;EAClD;EAEAD,YAAY,CAACN,KAAK,EAAE;IAClB;IACA,IAAI,CAACC,QAAQ,CAAC;MAACG,KAAK,EAAEJ,KAAK,CAACG,MAAM,CAACC,KAAK;MAAEF,MAAM,EAAEF,KAAK,CAACG,MAAM,CAACC;IAAK,CAAC,CAAC;EACxE;EAEAI,YAAY,CAACR,KAAK,EAAE;IAClBS,KAAK,CAAC,wBAAwB,GAAG,IAAI,CAACJ,KAAK,CAACD,KAAK,CAAC;IAClD;IACAJ,KAAK,CAACU,cAAc,EAAE;EACxB;EAOA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACAC,MAAM,GAAG;IACP,oBACE;MAAM,QAAQ,EAAE,IAAI,CAACH,YAAa;MAAA,wBAChC;QAAA,iCAEE;UAAO,IAAI,EAAC,MAAM;UAAC,KAAK,EAAE,IAAI,CAACH,KAAK,CAACD,KAAM;UAAC,QAAQ,EAAE,IAAI,CAACE;QAAa;UAAA;UAAA;UAAA;QAAA,QAAG;MAAA;QAAA;QAAA;QAAA;MAAA,QACrE,eACR;QAAA,sDAIA;UAAQ,QAAQ,EAAE,IAAK;UAAC,KAAK,EAAE,CAAC,MAAM,EAAE,SAAS,CAAE;UAAC,QAAQ,EAAE,IAAI,CAACP,kBAAmB;UAAA,wBACpF;YAAQ,KAAK,EAAC,YAAY;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAoB,eAC9C;YAAQ,KAAK,EAAC,MAAM;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAc,eAClC;YAAQ,KAAK,EAAC,SAAS;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAiB,eACxC;YAAQ,KAAK,EAAC,OAAO;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAe;QAAA;UAAA;UAAA;UAAA;QAAA,QAC7B;MAAA;QAAA;QAAA;QAAA;MAAA,QACH,eACN;QAAO,IAAI,EAAC,QAAQ;QAAC,KAAK,EAAC;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QACjC;EAEX;AACF;AAEA,eAAeJ,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}