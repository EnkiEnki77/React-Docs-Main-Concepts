{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EnkiE\\\\Documents\\\\builds\\\\react-docs-main-concepts\\\\src\\\\components\\\\Counter.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n    this.increment = this.increment.bind(this);\n  }\n\n  // All set state calls are batched into one update in order to prevent unnecessary rerenders. This makes setState asynchronous,\n  // because of this you cannot rely on current state to calculate next state, such as in a counter. \n\n  increment() {\n    // both calls rely on current state at time of the call for incrementing, because setState is async you can make this call\n    // infinite times, but none of the calls will know about the incrementation done by any of the others, so the state will only \n    // increment once per event\n    this.setState({\n      count: this.state.count + this.props.increment\n    });\n    this.setState({\n      count: this.state.count + this.props.increment\n    });\n    console.log(this.state.count);\n\n    // There is a callback you can pass to setState, it takes in the previous state from the output of last setState call, and the \n    // current props at time of update as inputs. It always operates based off the output of the last setState call, so if you \n    // had 4 other setState calls before it that were also utilizing the call back it would increment by 5, but putting just\n    // one call that doesnt utilize the callback between them would make it increment only by 2, this is because without the callback \n    // the setState call wouldnt know about the state outputted by the 4 calls before it, and would operate off the current state \n    // of 0. Meaning the last setState call which utilizes the callback would be working with a prevState of 1. \n    // this.setState((prev, props) => ({count: prev.count + props.increment}))\n    // this.setState((prev, props) => ({count: prev.count + props.increment}))\n    // this.setState((prev, props) => ({count: prev.count + props.increment}))\n    // this.setState((prev, props) => ({count: prev.count + props.increment}))\n    // this.setState({count: this.state.count + this.props.increment})\n    // this.setState((prev, props) => ({count: prev.count + props.increment}))\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: this.state.count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.increment,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this);\n  }\n}\nconst Count = props => {\n  _s();\n  const [count, setCount] = React.useState(0);\n  const increment = () => {\n    setCount(count + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: increment,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n_s(Count, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n_c = Count;\nexport default Count;\nvar _c;\n$RefreshReg$(_c, \"Count\");","map":{"version":3,"names":["React","Counter","Component","constructor","props","state","count","increment","bind","setState","console","log","render","Count","setCount","useState"],"sources":["C:/Users/EnkiE/Documents/builds/react-docs-main-concepts/src/components/Counter.js"],"sourcesContent":["import React from 'react'\r\n\r\nclass Counter extends React.Component {\r\n    constructor(props) {\r\n        super(props) \r\n        this.state = {\r\n            count: 0\r\n        }\r\n\r\n        this.increment = this.increment.bind(this)\r\n    }\r\n\r\n    // All set state calls are batched into one update in order to prevent unnecessary rerenders. This makes setState asynchronous,\r\n    // because of this you cannot rely on current state to calculate next state, such as in a counter. \r\n   \r\n    increment() {\r\n        // both calls rely on current state at time of the call for incrementing, because setState is async you can make this call\r\n        // infinite times, but none of the calls will know about the incrementation done by any of the others, so the state will only \r\n        // increment once per event\r\n        this.setState({count: this.state.count + this.props.increment})\r\n        this.setState({count: this.state.count + this.props.increment})\r\n        console.log(this.state.count)\r\n\r\n        // There is a callback you can pass to setState, it takes in the previous state from the output of last setState call, and the \r\n        // current props at time of update as inputs. It always operates based off the output of the last setState call, so if you \r\n        // had 4 other setState calls before it that were also utilizing the call back it would increment by 5, but putting just\r\n        // one call that doesnt utilize the callback between them would make it increment only by 2, this is because without the callback \r\n        // the setState call wouldnt know about the state outputted by the 4 calls before it, and would operate off the current state \r\n        // of 0. Meaning the last setState call which utilizes the callback would be working with a prevState of 1. \r\n        // this.setState((prev, props) => ({count: prev.count + props.increment}))\r\n        // this.setState((prev, props) => ({count: prev.count + props.increment}))\r\n        // this.setState((prev, props) => ({count: prev.count + props.increment}))\r\n        // this.setState((prev, props) => ({count: prev.count + props.increment}))\r\n        // this.setState({count: this.state.count + this.props.increment})\r\n        // this.setState((prev, props) => ({count: prev.count + props.increment}))\r\n\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button>-</button>\r\n                <h1>{this.state.count}</h1>\r\n                <button onClick={this.increment}>+</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n const Count = (props) => {\r\n    const [count, setCount] = React.useState(0)\r\n\r\n    const increment = () => {\r\n        setCount(count + 1)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button>-</button>\r\n            <h1>{count}</h1>\r\n            <button onClick={increment}>+</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Count"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA;AAEzB,MAAMC,OAAO,SAASD,KAAK,CAACE,SAAS,CAAC;EAClCC,WAAW,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MACTC,KAAK,EAAE;IACX,CAAC;IAED,IAAI,CAACC,SAAS,GAAG,IAAI,CAACA,SAAS,CAACC,IAAI,CAAC,IAAI,CAAC;EAC9C;;EAEA;EACA;;EAEAD,SAAS,GAAG;IACR;IACA;IACA;IACA,IAAI,CAACE,QAAQ,CAAC;MAACH,KAAK,EAAE,IAAI,CAACD,KAAK,CAACC,KAAK,GAAG,IAAI,CAACF,KAAK,CAACG;IAAS,CAAC,CAAC;IAC/D,IAAI,CAACE,QAAQ,CAAC;MAACH,KAAK,EAAE,IAAI,CAACD,KAAK,CAACC,KAAK,GAAG,IAAI,CAACF,KAAK,CAACG;IAAS,CAAC,CAAC;IAC/DG,OAAO,CAACC,GAAG,CAAC,IAAI,CAACN,KAAK,CAACC,KAAK,CAAC;;IAE7B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAGJ;;EAEAM,MAAM,GAAG;IACL,oBACI;MAAA,wBACI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAkB,eAClB;QAAA,UAAK,IAAI,CAACP,KAAK,CAACC;MAAK;QAAA;QAAA;QAAA;MAAA,QAAM,eAC3B;QAAQ,OAAO,EAAE,IAAI,CAACC,SAAU;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAW;IAAA;MAAA;MAAA;MAAA;IAAA,QACzC;EAEd;AACJ;AAEC,MAAMM,KAAK,GAAIT,KAAK,IAAK;EAAA;EACtB,MAAM,CAACE,KAAK,EAAEQ,QAAQ,CAAC,GAAGd,KAAK,CAACe,QAAQ,CAAC,CAAC,CAAC;EAE3C,MAAMR,SAAS,GAAG,MAAM;IACpBO,QAAQ,CAACR,KAAK,GAAG,CAAC,CAAC;EACvB,CAAC;EAED,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAkB,eAClB;MAAA,UAAKA;IAAK;MAAA;MAAA;MAAA;IAAA,QAAM,eAChB;MAAQ,OAAO,EAAEC,SAAU;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAW;EAAA;IAAA;IAAA;IAAA;EAAA,QACpC;AAEd,CAAC;AAAA,GAdMM,KAAK;AAAA,KAALA,KAAK;AAgBZ,eAAeA,KAAK;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}