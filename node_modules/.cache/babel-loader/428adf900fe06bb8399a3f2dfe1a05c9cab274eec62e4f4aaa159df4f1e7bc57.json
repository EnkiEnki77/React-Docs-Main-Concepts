{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EnkiE\\\\Documents\\\\builds\\\\react-docs-main-concepts\\\\src\\\\components\\\\NameForm.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      textValue: '',\n      selectValue: 'coconut'\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(event) {\n    // destructuring name and value from event.target.\n    const {\n      name,\n      value\n    } = event.target;\n    // Using an index signature to determine which state to update based on the event.target's name, sets state to teh event.targets \n    // value. \n    this.setState({\n      [name]: value\n    });\n  }\n  handleSubmit(event) {\n    alert('A name was submitted: ' + this.state.value);\n    // utilizing the synthetic event input to prevent default behaviour of the form refreshing the page on submit\n    event.preventDefault();\n  }\n\n  // By default forms in react have the typical form behaviour of browsing to a new page when a user submits the form. in most\n  // cases though you want to have an onSubmit event listener that runs an event handler function that handles the submmission\n  // and has access to the data the user entered in the form. The process of doing this is called controlled components. \n\n  // In HTML inputs usually maintain their own state, and update it based on user input. In React components mutable state is \n  // usually kept in the state property, and updated through setState. We can combine the two by setting the value of inputs to\n  // be determined by state, and allowing users to alter state on input using an eventHandler and the synthetic event argument.\n  // An input whose value is controlled by React in this way is called a controlled component\n  render() {\n    return (\n      /*#__PURE__*/\n      // To handle multiple form elements with one eventHandler give each element a name attribute, can then use an index signature \n      // to determine what state to change based on the name of the event.target. Should make the name the same as the state that controls \n      // the input.\n      _jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"textValu \",\n            type: \"text\",\n            value: this.state.value,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Pick your favorite flavor:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"selectValue\",\n            value: this.state.selectValue,\n            onChange: this.handleChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"grapefruit\",\n              children: \"Grapefruit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"lime\",\n              children: \"Lime\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"coconut\",\n              children: \"Coconut\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"mango\",\n              children: \"Mango\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    );\n  }\n}\nexport default NameForm;","map":{"version":3,"names":["React","NameForm","Component","constructor","props","state","textValue","selectValue","handleChange","bind","handleSubmit","event","name","value","target","setState","alert","preventDefault","render"],"sources":["C:/Users/EnkiE/Documents/builds/react-docs-main-concepts/src/components/NameForm.js"],"sourcesContent":["import React from 'react';\r\n\r\nclass NameForm extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {textValue: '', selectValue: 'coconut'};\r\n  \r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n  \r\n    handleChange(event) {\r\n      // destructuring name and value from event.target.\r\n      const {name, value} = event.target\r\n      // Using an index signature to determine which state to update based on the event.target's name, sets state to teh event.targets \r\n      // value. \r\n      this.setState({[name]: value});\r\n    }\r\n  \r\n    handleSubmit(event) {\r\n      alert('A name was submitted: ' + this.state.value);\r\n      // utilizing the synthetic event input to prevent default behaviour of the form refreshing the page on submit\r\n      event.preventDefault();\r\n    }\r\n    \r\n\r\n    // By default forms in react have the typical form behaviour of browsing to a new page when a user submits the form. in most\r\n    // cases though you want to have an onSubmit event listener that runs an event handler function that handles the submmission\r\n    // and has access to the data the user entered in the form. The process of doing this is called controlled components. \r\n\r\n    // In HTML inputs usually maintain their own state, and update it based on user input. In React components mutable state is \r\n    // usually kept in the state property, and updated through setState. We can combine the two by setting the value of inputs to\r\n    // be determined by state, and allowing users to alter state on input using an eventHandler and the synthetic event argument.\r\n    // An input whose value is controlled by React in this way is called a controlled component\r\n    render() {\r\n      return (\r\n        // To handle multiple form elements with one eventHandler give each element a name attribute, can then use an index signature \r\n        // to determine what state to change based on the name of the event.target. Should make the name the same as the state that controls \r\n        // the input.\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>\r\n            Name:\r\n            <input name='textValu ' type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n          </label>\r\n          <label>\r\n          {/* Dropdown values are chosen by passing the state and event listener on the select tag, initial choice is determined by \r\n          initial state. you can  */}\r\n          Pick your favorite flavor:\r\n          <select name='selectValue' value={this.state.selectValue} onChange={this.handleChange}>\r\n            <option value=\"grapefruit\">Grapefruit</option>\r\n            <option value=\"lime\">Lime</option>\r\n            <option value=\"coconut\">Coconut</option>\r\n            <option value=\"mango\">Mango</option>\r\n          </select>\r\n        </label>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default NameForm "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC;AAE1B,MAAMC,QAAQ,SAASD,KAAK,CAACE,SAAS,CAAC;EACnCC,WAAW,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MAACC,SAAS,EAAE,EAAE;MAAEC,WAAW,EAAE;IAAS,CAAC;IAEpD,IAAI,CAACC,YAAY,GAAG,IAAI,CAACA,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC;IAChD,IAAI,CAACC,YAAY,GAAG,IAAI,CAACA,YAAY,CAACD,IAAI,CAAC,IAAI,CAAC;EAClD;EAEAD,YAAY,CAACG,KAAK,EAAE;IAClB;IACA,MAAM;MAACC,IAAI;MAAEC;IAAK,CAAC,GAAGF,KAAK,CAACG,MAAM;IAClC;IACA;IACA,IAAI,CAACC,QAAQ,CAAC;MAAC,CAACH,IAAI,GAAGC;IAAK,CAAC,CAAC;EAChC;EAEAH,YAAY,CAACC,KAAK,EAAE;IAClBK,KAAK,CAAC,wBAAwB,GAAG,IAAI,CAACX,KAAK,CAACQ,KAAK,CAAC;IAClD;IACAF,KAAK,CAACM,cAAc,EAAE;EACxB;;EAGA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACAC,MAAM,GAAG;IACP;MAAA;MACE;MACA;MACA;MACA;QAAM,QAAQ,EAAE,IAAI,CAACR,YAAa;QAAA,wBAChC;UAAA,iCAEE;YAAO,IAAI,EAAC,WAAW;YAAC,IAAI,EAAC,MAAM;YAAC,KAAK,EAAE,IAAI,CAACL,KAAK,CAACQ,KAAM;YAAC,QAAQ,EAAE,IAAI,CAACL;UAAa;YAAA;YAAA;YAAA;UAAA,QAAG;QAAA;UAAA;UAAA;UAAA;QAAA,QACtF,eACR;UAAA,sDAIA;YAAQ,IAAI,EAAC,aAAa;YAAC,KAAK,EAAE,IAAI,CAACH,KAAK,CAACE,WAAY;YAAC,QAAQ,EAAE,IAAI,CAACC,YAAa;YAAA,wBACpF;cAAQ,KAAK,EAAC,YAAY;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QAAoB,eAC9C;cAAQ,KAAK,EAAC,MAAM;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QAAc,eAClC;cAAQ,KAAK,EAAC,SAAS;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QAAiB,eACxC;cAAQ,KAAK,EAAC,OAAO;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QAAe;UAAA;YAAA;YAAA;YAAA;UAAA,QAC7B;QAAA;UAAA;UAAA;UAAA;QAAA,QACH,eACN;UAAO,IAAI,EAAC,QAAQ;UAAC,KAAK,EAAC;QAAQ;UAAA;UAAA;UAAA;QAAA,QAAG;MAAA;QAAA;QAAA;QAAA;MAAA;IACjC;EAEX;AACF;AAEA,eAAeP,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}